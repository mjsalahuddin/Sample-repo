pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                  // Just print a Hello, Pipeline to the console
          echo "Hello, Pipeline!"
          // Compile a Java file. This requires JDKconfiguration from Jenkins
          //javac HelloWorld.java
          // Execute the compiled Java binary called HelloWorld. This requires JDK configuration from Jenkins
          //java HelloWorld
          // Executes the Apache Maven commands, clean then package. This requires Apache Maven configuration from Jenkins
          //mvn clean package ./HelloPackage
          // List the files in current directory path by executing a default shell command
          sh "ls -ltr"
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}

//This is a sample CICD Pipeline code for one of the tactics-production repo projects 
#!/usr/bin/env groovy

// Deployment pipeline for tactics production repo

pipeline {
    agent any
    options {
        //skipDefaultCheckout(true)
        skipStagesAfterUnstable()
    }
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                // uses the credentials built into the job on Jenkins
                //checkout scm
            }
        }
        stage('Build SBB packages') {
            steps {
                echo 'Building the SBB packages'
                // Cython/Cython GSL are installed in the base global Anaconda env
                // Other Python packages are only installed in the env for modules that are executed (cron'd)
                //sh './build_sbb_pkgs.sh'
            }
        }
        stage('Build conda envs for apps') {
            steps {
                echo 'Build conda envs for apps'
                //sh './build_conda_envs.sh -p api'
                //sh './link_sbb_pkgs.sh'
            }
        }
        stage('Test') {
            steps {
                echo 'Running the tests'
                //sh './run_pytest.sh -p api'
            }
        }
    }
    // "always" is first in the postbuild steps.
    // Can't clean before a successful build can copy files over
    post {
        always {
            echo 'Jenkins pipeline finished!'
            //junit 'test-reports/*.xml'
        }
        success {
            echo 'Build was successful'
            
                }
                }
            }
        //unstable {
            //echo 'Unstable compilation or failed tests'
        //}
        //failure {
            //echo 'Failed'
        //}
        //cleanup {
            //cleanWs()
        //}
